// Code generated by protoc-gen-go.
// source: session.proto
// DO NOT EDIT!

/*
Package session is a generated protocol buffer package.

It is generated from these files:
	session.proto

It has these top-level messages:
	RegisterRequest
	RegisterReply
	UnRegisterRequest
	UnRegisterReply
	GetClientsRequest
	ConnHost
	GetClientsReply
*/
package session

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterRequest struct {
	UserId        string `protobuf:"bytes,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	ConnId        string `protobuf:"bytes,2,opt,name=ConnId,json=connId" json:"ConnId,omitempty"`
	ConnectorHost string `protobuf:"bytes,3,opt,name=ConnectorHost,json=connectorHost" json:"ConnectorHost,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RegisterReply struct {
	Status  bool   `protobuf:"varint,1,opt,name=Status,json=status" json:"Status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,json=message" json:"Message,omitempty"`
}

func (m *RegisterReply) Reset()                    { *m = RegisterReply{} }
func (m *RegisterReply) String() string            { return proto.CompactTextString(m) }
func (*RegisterReply) ProtoMessage()               {}
func (*RegisterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type UnRegisterRequest struct {
	UserId        string `protobuf:"bytes,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	ConnId        string `protobuf:"bytes,2,opt,name=ConnId,json=connId" json:"ConnId,omitempty"`
	ConnectorHost string `protobuf:"bytes,3,opt,name=ConnectorHost,json=connectorHost" json:"ConnectorHost,omitempty"`
}

func (m *UnRegisterRequest) Reset()                    { *m = UnRegisterRequest{} }
func (m *UnRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*UnRegisterRequest) ProtoMessage()               {}
func (*UnRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type UnRegisterReply struct {
	Status  bool   `protobuf:"varint,1,opt,name=Status,json=status" json:"Status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,json=message" json:"Message,omitempty"`
}

func (m *UnRegisterReply) Reset()                    { *m = UnRegisterReply{} }
func (m *UnRegisterReply) String() string            { return proto.CompactTextString(m) }
func (*UnRegisterReply) ProtoMessage()               {}
func (*UnRegisterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetClientsRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
}

func (m *GetClientsRequest) Reset()                    { *m = GetClientsRequest{} }
func (m *GetClientsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetClientsRequest) ProtoMessage()               {}
func (*GetClientsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ConnHost struct {
	ConnId string `protobuf:"bytes,1,opt,name=ConnId,json=connId" json:"ConnId,omitempty"`
	Host   string `protobuf:"bytes,2,opt,name=Host,json=host" json:"Host,omitempty"`
}

func (m *ConnHost) Reset()                    { *m = ConnHost{} }
func (m *ConnHost) String() string            { return proto.CompactTextString(m) }
func (*ConnHost) ProtoMessage()               {}
func (*ConnHost) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type GetClientsReply struct {
	Hosts []*ConnHost `protobuf:"bytes,1,rep,name=Hosts,json=hosts" json:"Hosts,omitempty"`
}

func (m *GetClientsReply) Reset()                    { *m = GetClientsReply{} }
func (m *GetClientsReply) String() string            { return proto.CompactTextString(m) }
func (*GetClientsReply) ProtoMessage()               {}
func (*GetClientsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetClientsReply) GetHosts() []*ConnHost {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "session.RegisterRequest")
	proto.RegisterType((*RegisterReply)(nil), "session.RegisterReply")
	proto.RegisterType((*UnRegisterRequest)(nil), "session.UnRegisterRequest")
	proto.RegisterType((*UnRegisterReply)(nil), "session.UnRegisterReply")
	proto.RegisterType((*GetClientsRequest)(nil), "session.GetClientsRequest")
	proto.RegisterType((*ConnHost)(nil), "session.ConnHost")
	proto.RegisterType((*GetClientsReply)(nil), "session.GetClientsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Session service

type SessionClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	UnRegister(ctx context.Context, in *UnRegisterRequest, opts ...grpc.CallOption) (*UnRegisterReply, error)
	GetClients(ctx context.Context, in *GetClientsRequest, opts ...grpc.CallOption) (*GetClientsReply, error)
}

type sessionClient struct {
	cc *grpc.ClientConn
}

func NewSessionClient(cc *grpc.ClientConn) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := grpc.Invoke(ctx, "/session.Session/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) UnRegister(ctx context.Context, in *UnRegisterRequest, opts ...grpc.CallOption) (*UnRegisterReply, error) {
	out := new(UnRegisterReply)
	err := grpc.Invoke(ctx, "/session.Session/UnRegister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) GetClients(ctx context.Context, in *GetClientsRequest, opts ...grpc.CallOption) (*GetClientsReply, error) {
	out := new(GetClientsReply)
	err := grpc.Invoke(ctx, "/session.Session/GetClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Session service

type SessionServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	UnRegister(context.Context, *UnRegisterRequest) (*UnRegisterReply, error)
	GetClients(context.Context, *GetClientsRequest) (*GetClientsReply, error)
}

func RegisterSessionServer(s *grpc.Server, srv SessionServer) {
	s.RegisterService(&_Session_serviceDesc, srv)
}

func _Session_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_UnRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).UnRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/UnRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).UnRegister(ctx, req.(*UnRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_GetClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).GetClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/GetClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).GetClients(ctx, req.(*GetClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Session_serviceDesc = grpc.ServiceDesc{
	ServiceName: "session.Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Session_Register_Handler,
		},
		{
			MethodName: "UnRegister",
			Handler:    _Session_UnRegister_Handler,
		},
		{
			MethodName: "GetClients",
			Handler:    _Session_GetClients_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("session.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x1b, 0xdb, 0x26, 0x75, 0x24, 0x94, 0xee, 0xa1, 0x2c, 0x39, 0xc9, 0x22, 0x58, 0x10,
	0x7a, 0xa8, 0xe0, 0xc1, 0x83, 0x20, 0x11, 0xb4, 0x07, 0x2f, 0x29, 0x7d, 0x80, 0x9a, 0x0e, 0x31,
	0x10, 0xb3, 0x31, 0xb3, 0x39, 0xf4, 0x41, 0x7d, 0x1f, 0xd9, 0x4d, 0x93, 0xac, 0x6d, 0x41, 0xf0,
	0xe0, 0xf1, 0x9f, 0xd9, 0xfd, 0xff, 0x6f, 0x66, 0x17, 0x7c, 0x42, 0xa2, 0x54, 0xe6, 0xf3, 0xa2,
	0x94, 0x4a, 0x32, 0x6f, 0x2f, 0x45, 0x02, 0xe3, 0x08, 0x93, 0x94, 0x14, 0x96, 0x11, 0x7e, 0x56,
	0x48, 0x8a, 0x4d, 0xc1, 0x5d, 0x13, 0x96, 0xcb, 0x2d, 0x77, 0x2e, 0x9d, 0xd9, 0x79, 0xe4, 0x56,
	0x46, 0xe9, 0x7a, 0x28, 0xf3, 0x7c, 0xb9, 0xe5, 0x67, 0x75, 0x3d, 0x36, 0x8a, 0x5d, 0x81, 0xaf,
	0xeb, 0x18, 0x2b, 0x59, 0xbe, 0x48, 0x52, 0xbc, 0x6f, 0xda, 0x7e, 0x6c, 0x17, 0xc5, 0x23, 0xf8,
	0x5d, 0x50, 0x91, 0xed, 0xb4, 0xdd, 0x4a, 0x6d, 0x54, 0x45, 0x26, 0x66, 0x14, 0xb9, 0x64, 0x14,
	0xe3, 0xe0, 0xbd, 0x22, 0xd1, 0x26, 0xc1, 0x7d, 0x8e, 0xf7, 0x51, 0x4b, 0x91, 0xc2, 0x64, 0x9d,
	0xff, 0x0f, 0x6d, 0x08, 0x63, 0x3b, 0xea, 0x6f, 0xbc, 0x37, 0x30, 0x79, 0x46, 0x15, 0x66, 0x29,
	0xe6, 0x8a, 0x7e, 0xe1, 0x15, 0x77, 0x30, 0xd2, 0x5c, 0x3a, 0xdd, 0x62, 0x77, 0x7e, 0xb0, 0x33,
	0x18, 0x18, 0xe4, 0x3a, 0x67, 0xf0, 0xae, 0x49, 0xef, 0x61, 0x6c, 0x87, 0x68, 0xd2, 0x6b, 0x18,
	0xea, 0x63, 0x1a, 0xb4, 0x3f, 0xbb, 0x58, 0x4c, 0xe6, 0xcd, 0xdb, 0x37, 0x01, 0xd1, 0x50, 0x5f,
	0xa5, 0xc5, 0x97, 0x03, 0xde, 0xaa, 0xee, 0xb1, 0x07, 0x18, 0x35, 0xf3, 0x32, 0xde, 0xde, 0x38,
	0xd8, 0x76, 0x30, 0x3d, 0xd1, 0x29, 0xb2, 0x9d, 0xe8, 0xb1, 0x27, 0x80, 0x6e, 0x63, 0x2c, 0x68,
	0xcf, 0x1d, 0xbd, 0x58, 0xc0, 0x4f, 0xf6, 0x5a, 0x97, 0x6e, 0x1a, 0xcb, 0xe5, 0x68, 0x8f, 0x96,
	0xcb, 0xc1, 0xf8, 0xa2, 0xf7, 0xe6, 0x9a, 0x4f, 0x7e, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x2c,
	0xf8, 0x12, 0x69, 0xf5, 0x02, 0x00, 0x00,
}
